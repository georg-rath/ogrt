# vim: set filetype=python:
APPNAME = 'ogrt'

def git_version():
    import os
    import sys

    version = 'unknown'
    try:
        version = os.popen('git describe --dirty --always --tags --abbrev=6').read().strip()
    except Exception as e:
        try:
          version_file = open('.version', 'r')
          version = version_file.read()
        finally:
          if version_file:
            version_file.close()
    return version

VERSION = git_version()

def options(opt):
    config_group = opt.get_option_group('configure options')
    opt.load('compiler_c gnu_dirs waf_unit_test')
    config_group.add_option('--server-host', dest='server_host', default="localhost", action='store', type='string', help='the hostname of the OGRT server')
    config_group.add_option('--server-port', dest='server_port', default=7971, action='store', type='int', help='the port of the OGRT server')
    config_group.add_option('--env-jobid', dest='env_jobid', default="JOBID", action='store', type='string', help='the default environment variable that contains the job id')
    config_group.add_option('--msg-send-username', dest='msg_username', default='yes', action='store', type='choice', choices=['yes', 'no'], help='send username to the server')
    config_group.add_option('--msg-send-hostname', dest='msg_hostname', default='yes', action='store', type='choice', choices=['yes', 'no'], help='send hostname to the server')
    config_group.add_option('--msg-send-cmdline', dest='msg_cmdline', default='yes', action='store', type='choice', choices=['yes', 'no'], help='send cmdline of program to the server')
    config_group.add_option('--msg-send-cwd', dest='msg_cwd', default='yes', action='store', type='choice', choices=['yes', 'no'], help='send current working directory of program to the server')
    config_group.add_option('--msg-send-environment', dest='msg_environment', default='no', action='store', type='choice', choices=['yes', 'no'], help='send environment to the server')
    config_group.add_option('--msg-send-environment-whitelist', dest='msg_environment_whitelist', default='', action='store', type='string', help='limit environment variable sending to these variables (comma separated list)')
    config_group.add_option('--msg-send-loadedmodules', dest='msg_loadedmodules', default='yes', action='store', type='choice', choices=['yes', 'no'], help='send loaded modules at the time to the server')
    config_group.add_option('--filter-regexps', dest='filter_regexps', default='', action='store', type='string', help='do not monitor processes that match those POSIX regular expressions (comma separated list)')

def configure(conf):
    conf.load('compiler_c gnu_dirs waf_unit_test')
    conf.cc_add_flags()
    conf.env.append_unique('CFLAGS', ['-g', '-std=c99'])
    if not [flag for flag in conf.env.CFLAGS if flag.startswith('-O')]:
        conf.env.append_unique('CFLAGS', '-O3')
    conf.check_cc(stlib='elf')
    conf.check(header_name="gelf.h")
    conf.check_cc(lib='dl', uselib_store='dl')
    conf.check_cc(stlib='uuid', fragment="#include <uuid/uuid.h>\nint main() { uuid_t uuid;uuid_generate(uuid); }" )
    conf.check(header_name="uuid/uuid.h")
    conf.check_cc(stlib='protobuf-c')
    conf.check(header_name="protobuf-c/protobuf-c.h")
    conf.check(header_name="time.h")
    try:
        conf.check_cc(msg="clock_gettime without librt", fragment="#define _POSIX_C_SOURCE 199309L\n#include <time.h>\nint main() { struct timespec ts; clock_gettime(CLOCK_REALTIME, &ts); }")
    except conf.errors.WafError:
        conf.check_cc(msg="clock_gettime with librt", lib = 'rt', uselib_store='rt', fragment="#include <time.h>\nint main() { struct timespec ts; clock_gettime(CLOCK_REALTIME, &ts); }")

    if not conf.options.server_host:
        raise conf.errors.WafError('no server hostname specified')
    else:
        conf.define('OGRT_NET_HOST', conf.options.server_host)

    if conf.options.server_port < 1 or conf.options.server_port > 65535 :
        raise conf.errors.WafError('invalid server port specified')
    else:
        conf.define('OGRT_NET_PORT', str(conf.options.server_port))

    environment_whitelist = ', '.join("\"%s\"" % str(e) for e in set(conf.options.msg_environment_whitelist.split(',')) if e)
    environment_whitelist_length = len(environment_whitelist.split(',')) if environment_whitelist else 0
    conf.define('OGRT_ENV_JOBID', conf.options.env_jobid)
    conf.define('OGRT_MSG_SEND_ENVIRONMENT', 1 if conf.options.msg_environment == 'yes' else 0)
    if environment_whitelist_length > 0:
        conf.define('OGRT_MSG_SEND_ENVIRONMENT_WHITELIST', environment_whitelist, quote=False)
        conf.define('OGRT_MSG_SEND_ENVIRONMENT_WHITELIST_LENGTH', environment_whitelist_length)
    conf.define('OGRT_MSG_SEND_USERNAME', 1 if conf.options.msg_username == 'yes' else 0)
    conf.define('OGRT_MSG_SEND_HOSTNAME', 1 if conf.options.msg_hostname == 'yes' else 0)
    conf.define('OGRT_MSG_SEND_CMDLINE', 1 if conf.options.msg_cmdline == 'yes' else 0)
    conf.define('OGRT_MSG_SEND_CWD', 1 if conf.options.msg_cwd == 'yes' else 0)
    conf.define('OGRT_MSG_SEND_LOADEDMODULES', 1 if conf.options.msg_loadedmodules == 'yes' else 0)
    filter_regexps = ', '.join("\"%s\"" % str(e) for e in set(conf.options.filter_regexps.split(',')) if e)
    filter_regexps_length = len(filter_regexps.split(',')) if filter_regexps else 0
    conf.define('OGRT_FILTER_REGEXPS', 1 if filter_regexps_length > 0 else 0)
    if filter_regexps_length > 0:
        conf.define('OGRT_FILTER_REGEXPS_LIST', filter_regexps, quote=False)
        conf.define('OGRT_FILTER_REGEXPS_LIST_LENGTH', filter_regexps_length)

    conf.define('OGRT_VERSION', git_version())
    conf.write_config_header('config.h')

def build(bld):
    lib_sources = [ "src/ogrt-main.c", "src/ogrt.pb-c.c", "src/ogrt-readso.c", "src/ogrt-util.c" ]

    bld.shlib(includes='.', source=lib_sources, use=['rt','dl'], target='ogrt', stlib=['protobuf-c', 'uuid'])
    bld.stlib(includes='.', source=lib_sources, use=['rt','dl'], target='ogrt', stlib=['protobuf-c', 'uuid'])

    bld(features='c cprogram test', install_path=None, includes='.', source=lib_sources + [ "test/test_util.c" ], lib=['rt','dl'], target='test_util', stlib=['protobuf-c', 'uuid', 'elf'])
    bld(features='c cprogram test', install_path=None, includes='.', source=lib_sources + [ "test/test_readso.c" ], lib=['rt','dl'], target='test_readso', stlib=['protobuf-c', 'uuid', 'elf'])
    bld(features='c cprogram test', install_path=None, includes='.', source=lib_sources + [ "test/test_processinfo.c" ], lib=['rt', 'dl'],  target='test_processinfo', stlib=['protobuf-c', 'uuid', 'elf'])

#    bld(features='c cprogram', install_path=None, source=[ "test/signal-test.c" ], target='test_signal')
#    bld(features='test_scripts', test_scripts_source='./test/test_signals', test_scripts_template='./${SCRIPT}')

    bld.options.all_tests = True

    from waflib.Tools import waf_unit_test
    bld.add_post_fun(waf_unit_test.summary)
    bld.add_post_fun(waf_unit_test.set_exit_code)

def dist(dst):
    try:
        version_file = open(".version", 'w')
        version_file.write(VERSION)
    finally:
        if version_file:
            version_file.close()

/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protocol/ogrt.proto */

#ifndef PROTOBUF_C_protocol_2fogrt_2eproto__INCLUDED
#define PROTOBUF_C_protocol_2fogrt_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Msg__SharedObject Msg__SharedObject;
typedef struct _Msg__Module Msg__Module;
typedef struct _Msg__ProcessStart Msg__ProcessStart;
typedef struct _Msg__ProcessEnd Msg__ProcessEnd;
typedef struct _Msg__ProcessInfo Msg__ProcessInfo;


/* --- enums --- */

typedef enum _Msg__MessageType {
  MSG__MESSAGE_TYPE__UnknownMsg = 0,
  MSG__MESSAGE_TYPE__ProcessStartMsg = 12,
  MSG__MESSAGE_TYPE__ProcessEndMsg = 16
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MSG__MESSAGE_TYPE)
} Msg__MessageType;

/* --- messages --- */

struct  _Msg__SharedObject
{
  ProtobufCMessage base;
  char *path;
  char *signature;
};
#define MSG__SHARED_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__shared_object__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Msg__Module
{
  ProtobufCMessage base;
  char *name;
};
#define MSG__MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__module__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * sent at start of process 
 */
struct  _Msg__ProcessStart
{
  ProtobufCMessage base;
  ProtobufCBinaryData uuid;
  char *binpath;
  int32_t pid;
  int32_t parent_pid;
  int64_t time;
  char *signature;
  char *job_id;
  char *username;
  char *hostname;
  char *cmdline;
  char *cwd;
  size_t n_environment_variables;
  char **environment_variables;
  size_t n_arguments;
  char **arguments;
  size_t n_shared_objects;
  Msg__SharedObject **shared_objects;
  size_t n_loaded_modules;
  Msg__Module **loaded_modules;
};
#define MSG__PROCESS_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__process_start__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * sent at end of process 
 */
struct  _Msg__ProcessEnd
{
  ProtobufCMessage base;
  ProtobufCBinaryData uuid;
  int64_t time;
  /*
   * for easier elasticsearch lookups 
   */
  int64_t starttime;
  /*
   * resource info from getrusage() 
   */
  /*
   * user CPU time used 
   */
  int64_t ru_utime;
  /*
   * system CPU time used 
   */
  int64_t ru_stime;
  /*
   * maximum resident set size 
   */
  int64_t ru_maxrss;
  /*
   * page reclaims (soft page faults) 
   */
  int64_t ru_minflt;
  /*
   * page faults (hard page faults) 
   */
  int64_t ru_majflt;
  /*
   * block input operations 
   */
  int64_t ru_inblock;
  /*
   * block output operations 
   */
  int64_t ru_oublock;
  /*
   * voluntary context switches 
   */
  int64_t ru_nvcsw;
  /*
   * involuntary context switches 
   */
  int64_t ru_nivcsw;
};
#define MSG__PROCESS_END__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__process_end__descriptor) \
    , {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * merged process data struct for replying through the query API
 */
struct  _Msg__ProcessInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData uuid;
  char *binpath;
  int32_t pid;
  int32_t parent_pid;
  int64_t start_time;
  int64_t end_time;
  char *signature;
  char *job_id;
  char *username;
  char *hostname;
  char *cmdline;
  char *cwd;
  size_t n_environment_variables;
  char **environment_variables;
  size_t n_arguments;
  char **arguments;
  size_t n_shared_objects;
  Msg__SharedObject **shared_objects;
  size_t n_loaded_modules;
  Msg__Module **loaded_modules;
  /*
   * resource info from getrusage() 
   */
  /*
   * user CPU time used 
   */
  int64_t ru_utime;
  /*
   * system CPU time used 
   */
  int64_t ru_stime;
  /*
   * maximum resident set size 
   */
  int64_t ru_maxrss;
  /*
   * page reclaims (soft page faults) 
   */
  int64_t ru_minflt;
  /*
   * page faults (hard page faults) 
   */
  int64_t ru_majflt;
  /*
   * block input operations 
   */
  int64_t ru_inblock;
  /*
   * block output operations 
   */
  int64_t ru_oublock;
  /*
   * voluntary context switches 
   */
  int64_t ru_nvcsw;
  /*
   * involuntary context switches 
   */
  int64_t ru_nivcsw;
};
#define MSG__PROCESS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&msg__process_info__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* Msg__SharedObject methods */
void   msg__shared_object__init
                     (Msg__SharedObject         *message);
size_t msg__shared_object__get_packed_size
                     (const Msg__SharedObject   *message);
size_t msg__shared_object__pack
                     (const Msg__SharedObject   *message,
                      uint8_t             *out);
size_t msg__shared_object__pack_to_buffer
                     (const Msg__SharedObject   *message,
                      ProtobufCBuffer     *buffer);
Msg__SharedObject *
       msg__shared_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__shared_object__free_unpacked
                     (Msg__SharedObject *message,
                      ProtobufCAllocator *allocator);
/* Msg__Module methods */
void   msg__module__init
                     (Msg__Module         *message);
size_t msg__module__get_packed_size
                     (const Msg__Module   *message);
size_t msg__module__pack
                     (const Msg__Module   *message,
                      uint8_t             *out);
size_t msg__module__pack_to_buffer
                     (const Msg__Module   *message,
                      ProtobufCBuffer     *buffer);
Msg__Module *
       msg__module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__module__free_unpacked
                     (Msg__Module *message,
                      ProtobufCAllocator *allocator);
/* Msg__ProcessStart methods */
void   msg__process_start__init
                     (Msg__ProcessStart         *message);
size_t msg__process_start__get_packed_size
                     (const Msg__ProcessStart   *message);
size_t msg__process_start__pack
                     (const Msg__ProcessStart   *message,
                      uint8_t             *out);
size_t msg__process_start__pack_to_buffer
                     (const Msg__ProcessStart   *message,
                      ProtobufCBuffer     *buffer);
Msg__ProcessStart *
       msg__process_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__process_start__free_unpacked
                     (Msg__ProcessStart *message,
                      ProtobufCAllocator *allocator);
/* Msg__ProcessEnd methods */
void   msg__process_end__init
                     (Msg__ProcessEnd         *message);
size_t msg__process_end__get_packed_size
                     (const Msg__ProcessEnd   *message);
size_t msg__process_end__pack
                     (const Msg__ProcessEnd   *message,
                      uint8_t             *out);
size_t msg__process_end__pack_to_buffer
                     (const Msg__ProcessEnd   *message,
                      ProtobufCBuffer     *buffer);
Msg__ProcessEnd *
       msg__process_end__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__process_end__free_unpacked
                     (Msg__ProcessEnd *message,
                      ProtobufCAllocator *allocator);
/* Msg__ProcessInfo methods */
void   msg__process_info__init
                     (Msg__ProcessInfo         *message);
size_t msg__process_info__get_packed_size
                     (const Msg__ProcessInfo   *message);
size_t msg__process_info__pack
                     (const Msg__ProcessInfo   *message,
                      uint8_t             *out);
size_t msg__process_info__pack_to_buffer
                     (const Msg__ProcessInfo   *message,
                      ProtobufCBuffer     *buffer);
Msg__ProcessInfo *
       msg__process_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   msg__process_info__free_unpacked
                     (Msg__ProcessInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Msg__SharedObject_Closure)
                 (const Msg__SharedObject *message,
                  void *closure_data);
typedef void (*Msg__Module_Closure)
                 (const Msg__Module *message,
                  void *closure_data);
typedef void (*Msg__ProcessStart_Closure)
                 (const Msg__ProcessStart *message,
                  void *closure_data);
typedef void (*Msg__ProcessEnd_Closure)
                 (const Msg__ProcessEnd *message,
                  void *closure_data);
typedef void (*Msg__ProcessInfo_Closure)
                 (const Msg__ProcessInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    msg__message_type__descriptor;
extern const ProtobufCMessageDescriptor msg__shared_object__descriptor;
extern const ProtobufCMessageDescriptor msg__module__descriptor;
extern const ProtobufCMessageDescriptor msg__process_start__descriptor;
extern const ProtobufCMessageDescriptor msg__process_end__descriptor;
extern const ProtobufCMessageDescriptor msg__process_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protocol_2fogrt_2eproto__INCLUDED */

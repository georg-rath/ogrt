// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/ogrt.proto

package OGRT

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_JobStartMsg        MessageType = 0
	MessageType_JobEndMsg          MessageType = 11
	MessageType_ProcessInfoMsg     MessageType = 12
	MessageType_ProcessResourceMsg MessageType = 16
	MessageType_SharedObjectMsg    MessageType = 13
	MessageType_ForkMsg            MessageType = 14
	MessageType_ExecveMsg          MessageType = 15
)

var MessageType_name = map[int32]string{
	0:  "JobStartMsg",
	11: "JobEndMsg",
	12: "ProcessInfoMsg",
	16: "ProcessResourceMsg",
	13: "SharedObjectMsg",
	14: "ForkMsg",
	15: "ExecveMsg",
}
var MessageType_value = map[string]int32{
	"JobStartMsg":        0,
	"JobEndMsg":          11,
	"ProcessInfoMsg":     12,
	"ProcessResourceMsg": 16,
	"SharedObjectMsg":    13,
	"ForkMsg":            14,
	"ExecveMsg":          15,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{0}
}

type JobStart struct {
	JobId     string `protobuf:"bytes,100,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	StartTime int64  `protobuf:"varint,101,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (m *JobStart) Reset()         { *m = JobStart{} }
func (m *JobStart) String() string { return proto.CompactTextString(m) }
func (*JobStart) ProtoMessage()    {}
func (*JobStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{0}
}
func (m *JobStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JobStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStart.Merge(dst, src)
}
func (m *JobStart) XXX_Size() int {
	return m.Size()
}
func (m *JobStart) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStart.DiscardUnknown(m)
}

var xxx_messageInfo_JobStart proto.InternalMessageInfo

func (m *JobStart) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobStart) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

type JobEnd struct {
	JobId   string `protobuf:"bytes,200,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	EndTime int64  `protobuf:"varint,201,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *JobEnd) Reset()         { *m = JobEnd{} }
func (m *JobEnd) String() string { return proto.CompactTextString(m) }
func (*JobEnd) ProtoMessage()    {}
func (*JobEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{1}
}
func (m *JobEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JobEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobEnd.Merge(dst, src)
}
func (m *JobEnd) XXX_Size() int {
	return m.Size()
}
func (m *JobEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_JobEnd.DiscardUnknown(m)
}

var xxx_messageInfo_JobEnd proto.InternalMessageInfo

func (m *JobEnd) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobEnd) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type SharedObject struct {
	Path      string `protobuf:"bytes,400,opt,name=path,proto3" json:"path,omitempty"`
	Signature string `protobuf:"bytes,401,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SharedObject) Reset()         { *m = SharedObject{} }
func (m *SharedObject) String() string { return proto.CompactTextString(m) }
func (*SharedObject) ProtoMessage()    {}
func (*SharedObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{2}
}
func (m *SharedObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharedObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharedObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SharedObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharedObject.Merge(dst, src)
}
func (m *SharedObject) XXX_Size() int {
	return m.Size()
}
func (m *SharedObject) XXX_DiscardUnknown() {
	xxx_messageInfo_SharedObject.DiscardUnknown(m)
}

var xxx_messageInfo_SharedObject proto.InternalMessageInfo

func (m *SharedObject) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SharedObject) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type Module struct {
	Name string `protobuf:"bytes,700,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{3}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(dst, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

func (m *Module) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// sent at start of process
type ProcessInfo struct {
	Uuid                 []byte          `protobuf:"bytes,299,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Binpath              string          `protobuf:"bytes,300,opt,name=binpath,proto3" json:"binpath,omitempty"`
	Pid                  int32           `protobuf:"varint,301,opt,name=pid,proto3" json:"pid,omitempty"`
	ParentPid            int32           `protobuf:"varint,302,opt,name=parent_pid,json=parentPid,proto3" json:"parent_pid,omitempty"`
	Time                 int64           `protobuf:"varint,303,opt,name=time,proto3" json:"time,omitempty"`
	Signature            string          `protobuf:"bytes,304,opt,name=signature,proto3" json:"signature,omitempty"`
	JobId                string          `protobuf:"bytes,305,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Username             string          `protobuf:"bytes,306,opt,name=username,proto3" json:"username,omitempty"`
	Hostname             string          `protobuf:"bytes,307,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Cmdline              string          `protobuf:"bytes,308,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	Cwd                  string          `protobuf:"bytes,313,opt,name=cwd,proto3" json:"cwd,omitempty"`
	EnvironmentVariables []string        `protobuf:"bytes,309,rep,name=environment_variables,json=environmentVariables" json:"environment_variables,omitempty"`
	Arguments            []string        `protobuf:"bytes,310,rep,name=arguments" json:"arguments,omitempty"`
	SharedObjects        []*SharedObject `protobuf:"bytes,311,rep,name=shared_objects,json=sharedObjects" json:"shared_objects,omitempty"`
	LoadedModules        []*Module       `protobuf:"bytes,312,rep,name=loaded_modules,json=loadedModules" json:"loaded_modules,omitempty"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{4}
}
func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(dst, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

func (m *ProcessInfo) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *ProcessInfo) GetBinpath() string {
	if m != nil {
		return m.Binpath
	}
	return ""
}

func (m *ProcessInfo) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcessInfo) GetParentPid() int32 {
	if m != nil {
		return m.ParentPid
	}
	return 0
}

func (m *ProcessInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProcessInfo) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ProcessInfo) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ProcessInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ProcessInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ProcessInfo) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *ProcessInfo) GetCwd() string {
	if m != nil {
		return m.Cwd
	}
	return ""
}

func (m *ProcessInfo) GetEnvironmentVariables() []string {
	if m != nil {
		return m.EnvironmentVariables
	}
	return nil
}

func (m *ProcessInfo) GetArguments() []string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ProcessInfo) GetSharedObjects() []*SharedObject {
	if m != nil {
		return m.SharedObjects
	}
	return nil
}

func (m *ProcessInfo) GetLoadedModules() []*Module {
	if m != nil {
		return m.LoadedModules
	}
	return nil
}

// sent at end of process
type ProcessResourceInfo struct {
	Uuid []byte `protobuf:"bytes,99,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Time int64  `protobuf:"varint,104,opt,name=time,proto3" json:"time,omitempty"`
	// resource info from getrusage()
	RuUtime   int64 `protobuf:"varint,105,opt,name=ru_utime,json=ruUtime,proto3" json:"ru_utime,omitempty"`
	RuStime   int64 `protobuf:"varint,106,opt,name=ru_stime,json=ruStime,proto3" json:"ru_stime,omitempty"`
	RuMaxrss  int64 `protobuf:"varint,107,opt,name=ru_maxrss,json=ruMaxrss,proto3" json:"ru_maxrss,omitempty"`
	RuMinflt  int64 `protobuf:"varint,108,opt,name=ru_minflt,json=ruMinflt,proto3" json:"ru_minflt,omitempty"`
	RuMajflt  int64 `protobuf:"varint,109,opt,name=ru_majflt,json=ruMajflt,proto3" json:"ru_majflt,omitempty"`
	RuInblock int64 `protobuf:"varint,110,opt,name=ru_inblock,json=ruInblock,proto3" json:"ru_inblock,omitempty"`
	RuOublock int64 `protobuf:"varint,111,opt,name=ru_oublock,json=ruOublock,proto3" json:"ru_oublock,omitempty"`
	RuNvcsw   int64 `protobuf:"varint,112,opt,name=ru_nvcsw,json=ruNvcsw,proto3" json:"ru_nvcsw,omitempty"`
	RuNivcsw  int64 `protobuf:"varint,113,opt,name=ru_nivcsw,json=ruNivcsw,proto3" json:"ru_nivcsw,omitempty"`
}

func (m *ProcessResourceInfo) Reset()         { *m = ProcessResourceInfo{} }
func (m *ProcessResourceInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessResourceInfo) ProtoMessage()    {}
func (*ProcessResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{5}
}
func (m *ProcessResourceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessResourceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProcessResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessResourceInfo.Merge(dst, src)
}
func (m *ProcessResourceInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessResourceInfo proto.InternalMessageInfo

func (m *ProcessResourceInfo) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *ProcessResourceInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuUtime() int64 {
	if m != nil {
		return m.RuUtime
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuStime() int64 {
	if m != nil {
		return m.RuStime
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuMaxrss() int64 {
	if m != nil {
		return m.RuMaxrss
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuMinflt() int64 {
	if m != nil {
		return m.RuMinflt
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuMajflt() int64 {
	if m != nil {
		return m.RuMajflt
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuInblock() int64 {
	if m != nil {
		return m.RuInblock
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuOublock() int64 {
	if m != nil {
		return m.RuOublock
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuNvcsw() int64 {
	if m != nil {
		return m.RuNvcsw
	}
	return 0
}

func (m *ProcessResourceInfo) GetRuNivcsw() int64 {
	if m != nil {
		return m.RuNivcsw
	}
	return 0
}

type JobInfo struct {
	JobId     string         `protobuf:"bytes,400,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Processes []*ProcessInfo `protobuf:"bytes,401,rep,name=processes" json:"processes,omitempty"`
}

func (m *JobInfo) Reset()         { *m = JobInfo{} }
func (m *JobInfo) String() string { return proto.CompactTextString(m) }
func (*JobInfo) ProtoMessage()    {}
func (*JobInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ogrt_060c3f010bea9554, []int{6}
}
func (m *JobInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JobInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobInfo.Merge(dst, src)
}
func (m *JobInfo) XXX_Size() int {
	return m.Size()
}
func (m *JobInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobInfo proto.InternalMessageInfo

func (m *JobInfo) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobInfo) GetProcesses() []*ProcessInfo {
	if m != nil {
		return m.Processes
	}
	return nil
}

func init() {
	proto.RegisterType((*JobStart)(nil), "OGRT.JobStart")
	proto.RegisterType((*JobEnd)(nil), "OGRT.JobEnd")
	proto.RegisterType((*SharedObject)(nil), "OGRT.SharedObject")
	proto.RegisterType((*Module)(nil), "OGRT.Module")
	proto.RegisterType((*ProcessInfo)(nil), "OGRT.ProcessInfo")
	proto.RegisterType((*ProcessResourceInfo)(nil), "OGRT.ProcessResourceInfo")
	proto.RegisterType((*JobInfo)(nil), "OGRT.JobInfo")
	proto.RegisterEnum("OGRT.MessageType", MessageType_name, MessageType_value)
}
func (m *JobStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.StartTime))
	}
	return i, nil
}

func (m *JobEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *SharedObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharedObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x19
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x19
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2b
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ProcessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.Binpath) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Binpath)))
		i += copy(dAtA[i:], m.Binpath)
	}
	if m.Pid != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.Pid))
	}
	if m.ParentPid != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.ParentPid))
	}
	if m.Time != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x12
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.Time))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if len(m.JobId) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Cmdline) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Cmdline)))
		i += copy(dAtA[i:], m.Cmdline)
	}
	if len(m.EnvironmentVariables) > 0 {
		for _, s := range m.EnvironmentVariables {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x13
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Arguments) > 0 {
		for _, s := range m.Arguments {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x13
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SharedObjects) > 0 {
		for _, msg := range m.SharedObjects {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x13
			i++
			i = encodeVarintOgrt(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LoadedModules) > 0 {
		for _, msg := range m.LoadedModules {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x13
			i++
			i = encodeVarintOgrt(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cwd) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x13
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Cwd)))
		i += copy(dAtA[i:], m.Cwd)
	}
	return i, nil
}

func (m *ProcessResourceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessResourceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.Time != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.Time))
	}
	if m.RuUtime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuUtime))
	}
	if m.RuStime != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuStime))
	}
	if m.RuMaxrss != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuMaxrss))
	}
	if m.RuMinflt != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuMinflt))
	}
	if m.RuMajflt != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuMajflt))
	}
	if m.RuInblock != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuInblock))
	}
	if m.RuOublock != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuOublock))
	}
	if m.RuNvcsw != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x7
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuNvcsw))
	}
	if m.RuNivcsw != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x7
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(m.RuNivcsw))
	}
	return i, nil
}

func (m *JobInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x19
		i++
		i = encodeVarintOgrt(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.Processes) > 0 {
		for _, msg := range m.Processes {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x19
			i++
			i = encodeVarintOgrt(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOgrt(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JobStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if m.StartTime != 0 {
		n += 2 + sovOgrt(uint64(m.StartTime))
	}
	return n
}

func (m *JobEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if m.EndTime != 0 {
		n += 2 + sovOgrt(uint64(m.EndTime))
	}
	return n
}

func (m *SharedObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	return n
}

func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	return n
}

func (m *ProcessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.Binpath)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if m.Pid != 0 {
		n += 2 + sovOgrt(uint64(m.Pid))
	}
	if m.ParentPid != 0 {
		n += 2 + sovOgrt(uint64(m.ParentPid))
	}
	if m.Time != 0 {
		n += 2 + sovOgrt(uint64(m.Time))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	l = len(m.Cmdline)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if len(m.EnvironmentVariables) > 0 {
		for _, s := range m.EnvironmentVariables {
			l = len(s)
			n += 2 + l + sovOgrt(uint64(l))
		}
	}
	if len(m.Arguments) > 0 {
		for _, s := range m.Arguments {
			l = len(s)
			n += 2 + l + sovOgrt(uint64(l))
		}
	}
	if len(m.SharedObjects) > 0 {
		for _, e := range m.SharedObjects {
			l = e.Size()
			n += 2 + l + sovOgrt(uint64(l))
		}
	}
	if len(m.LoadedModules) > 0 {
		for _, e := range m.LoadedModules {
			l = e.Size()
			n += 2 + l + sovOgrt(uint64(l))
		}
	}
	l = len(m.Cwd)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	return n
}

func (m *ProcessResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if m.Time != 0 {
		n += 2 + sovOgrt(uint64(m.Time))
	}
	if m.RuUtime != 0 {
		n += 2 + sovOgrt(uint64(m.RuUtime))
	}
	if m.RuStime != 0 {
		n += 2 + sovOgrt(uint64(m.RuStime))
	}
	if m.RuMaxrss != 0 {
		n += 2 + sovOgrt(uint64(m.RuMaxrss))
	}
	if m.RuMinflt != 0 {
		n += 2 + sovOgrt(uint64(m.RuMinflt))
	}
	if m.RuMajflt != 0 {
		n += 2 + sovOgrt(uint64(m.RuMajflt))
	}
	if m.RuInblock != 0 {
		n += 2 + sovOgrt(uint64(m.RuInblock))
	}
	if m.RuOublock != 0 {
		n += 2 + sovOgrt(uint64(m.RuOublock))
	}
	if m.RuNvcsw != 0 {
		n += 2 + sovOgrt(uint64(m.RuNvcsw))
	}
	if m.RuNivcsw != 0 {
		n += 2 + sovOgrt(uint64(m.RuNivcsw))
	}
	return n
}

func (m *JobInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 2 + l + sovOgrt(uint64(l))
	}
	if len(m.Processes) > 0 {
		for _, e := range m.Processes {
			l = e.Size()
			n += 2 + l + sovOgrt(uint64(l))
		}
	}
	return n
}

func sovOgrt(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOgrt(x uint64) (n int) {
	return sovOgrt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JobStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 201:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharedObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 400:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 700:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 299:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = append(m.Uuid[:0], dAtA[iNdEx:postIndex]...)
			if m.Uuid == nil {
				m.Uuid = []byte{}
			}
			iNdEx = postIndex
		case 300:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binpath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binpath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 301:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 302:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentPid", wireType)
			}
			m.ParentPid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentPid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 303:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 304:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 305:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 306:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 307:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 308:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmdline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmdline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 309:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentVariables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentVariables = append(m.EnvironmentVariables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 310:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 311:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedObjects = append(m.SharedObjects, &SharedObject{})
			if err := m.SharedObjects[len(m.SharedObjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 312:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadedModules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadedModules = append(m.LoadedModules, &Module{})
			if err := m.LoadedModules[len(m.LoadedModules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 313:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessResourceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessResourceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessResourceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = append(m.Uuid[:0], dAtA[iNdEx:postIndex]...)
			if m.Uuid == nil {
				m.Uuid = []byte{}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 105:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuUtime", wireType)
			}
			m.RuUtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuUtime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 106:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuStime", wireType)
			}
			m.RuStime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuStime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 107:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuMaxrss", wireType)
			}
			m.RuMaxrss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuMaxrss |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuMinflt", wireType)
			}
			m.RuMinflt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuMinflt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 109:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuMajflt", wireType)
			}
			m.RuMajflt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuMajflt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 110:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuInblock", wireType)
			}
			m.RuInblock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuInblock |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 111:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuOublock", wireType)
			}
			m.RuOublock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuOublock |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 112:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuNvcsw", wireType)
			}
			m.RuNvcsw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuNvcsw |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 113:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuNivcsw", wireType)
			}
			m.RuNivcsw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuNivcsw |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 400:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 401:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOgrt
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processes = append(m.Processes, &ProcessInfo{})
			if err := m.Processes[len(m.Processes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOgrt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOgrt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOgrt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOgrt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOgrt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOgrt
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOgrt
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOgrt(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOgrt = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOgrt   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol/ogrt.proto", fileDescriptor_ogrt_060c3f010bea9554) }

var fileDescriptor_ogrt_060c3f010bea9554 = []byte{
	// 761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x94, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xc7, 0x23, 0xbb, 0x49, 0xac, 0xc7, 0xb1, 0xd3, 0xd2, 0x6b, 0xc1, 0xb6, 0x88, 0x61, 0xf8,
	0x64, 0x0c, 0x98, 0x33, 0x6c, 0x3d, 0x0d, 0x3b, 0x0c, 0x05, 0xba, 0x21, 0x01, 0xdc, 0x14, 0x72,
	0xb6, 0xab, 0xa0, 0x17, 0x46, 0xa6, 0x23, 0x91, 0x1e, 0x29, 0xba, 0xdd, 0x57, 0xd8, 0xa9, 0xfb,
	0x1c, 0x7b, 0x7f, 0xdf, 0x80, 0x1d, 0x76, 0xec, 0x6e, 0x3d, 0xee, 0x38, 0x24, 0xc7, 0x7d, 0x89,
	0x81, 0x0f, 0x25, 0x5b, 0xcb, 0x4d, 0xff, 0xff, 0x8f, 0x0f, 0xa9, 0x87, 0x7f, 0x92, 0x30, 0x58,
	0x29, 0x59, 0xca, 0x44, 0xe6, 0xc7, 0x32, 0x53, 0xe5, 0x14, 0x15, 0xb9, 0x75, 0xf6, 0x51, 0x70,
	0xfe, 0xe0, 0xad, 0x8c, 0x97, 0x0b, 0x13, 0x4f, 0x13, 0x59, 0x1c, 0x67, 0x32, 0x93, 0xc7, 0x08,
	0x63, 0x73, 0x81, 0x0a, 0x05, 0x7e, 0xb9, 0xa2, 0xf1, 0x07, 0xd0, 0x39, 0x95, 0xf1, 0xbc, 0x8c,
	0x54, 0x49, 0xee, 0xc2, 0xde, 0x52, 0xc6, 0x21, 0x4f, 0x69, 0x3a, 0xf2, 0x26, 0x7e, 0xb0, 0xbb,
	0x94, 0xf1, 0x49, 0x4a, 0x8e, 0x00, 0xb4, 0xe5, 0x61, 0xc9, 0x0b, 0x46, 0xd9, 0xc8, 0x9b, 0xb4,
	0x03, 0x1f, 0x9d, 0x73, 0x5e, 0xb0, 0xf1, 0xfb, 0xb0, 0x77, 0x2a, 0xe3, 0x27, 0x22, 0x25, 0xf7,
	0x36, 0xf5, 0xaf, 0xbc, 0xe6, 0x04, 0x0f, 0xa0, 0xc3, 0x44, 0xea, 0xca, 0xff, 0xf2, 0xb0, 0x7e,
	0x9f, 0x89, 0x14, 0xab, 0x1f, 0xc3, 0xc1, 0x7c, 0x11, 0x29, 0x96, 0x9e, 0xc5, 0x4b, 0x96, 0x94,
	0x64, 0x00, 0xb7, 0x56, 0x51, 0xb9, 0xa0, 0x2f, 0xdb, 0x38, 0x03, 0x0a, 0x72, 0x04, 0xbe, 0xe6,
	0x99, 0x88, 0x4a, 0xa3, 0x18, 0xfd, 0xc2, 0x91, 0xad, 0x33, 0x3e, 0x82, 0xbd, 0x99, 0x4c, 0x4d,
	0xce, 0x6c, 0xb5, 0x88, 0x0a, 0x46, 0xff, 0xd8, 0x75, 0xd5, 0x56, 0x8c, 0xff, 0x6d, 0x43, 0xf7,
	0x99, 0x92, 0x09, 0xd3, 0xfa, 0x44, 0x5c, 0x48, 0x3b, 0xc8, 0x18, 0x9e, 0xd2, 0x2f, 0x5b, 0x23,
	0x6f, 0x72, 0x10, 0xa0, 0x20, 0xf7, 0x61, 0x3f, 0xe6, 0x02, 0x97, 0xfe, 0xaa, 0x85, 0xc5, 0xb5,
	0x26, 0x77, 0xa0, 0xbd, 0xe2, 0x29, 0xfd, 0xda, 0xda, 0xbb, 0x81, 0xfd, 0x26, 0x43, 0x80, 0x55,
	0xa4, 0x98, 0x28, 0x43, 0x4b, 0xbe, 0x71, 0xc4, 0x77, 0xd6, 0x33, 0x9e, 0xda, 0x25, 0xb0, 0xdb,
	0x6f, 0x5b, 0xd8, 0x2d, 0x8a, 0xff, 0x77, 0xf1, 0x5d, 0xeb, 0x46, 0x17, 0x8d, 0xdd, 0xfb, 0xbe,
	0xd5, 0xdc, 0xbd, 0x87, 0xd0, 0x31, 0x9a, 0x29, 0xec, 0xeb, 0x07, 0x47, 0x36, 0x86, 0x85, 0x0b,
	0xa9, 0x4b, 0x84, 0x3f, 0x56, 0xb0, 0x36, 0x6c, 0x4f, 0x49, 0x91, 0xe6, 0x5c, 0x30, 0xfa, 0x53,
	0xd5, 0x53, 0xa5, 0xc9, 0x23, 0xb8, 0xcb, 0xc4, 0x9a, 0x2b, 0x29, 0x0a, 0xdb, 0xc5, 0x3a, 0x52,
	0x3c, 0x8a, 0x73, 0xa6, 0xe9, 0xcf, 0xad, 0x51, 0x7b, 0xe2, 0x07, 0x6f, 0x34, 0xe8, 0x27, 0x35,
	0xb4, 0x1d, 0x44, 0x2a, 0x33, 0xd6, 0xd4, 0xf4, 0x17, 0x37, 0x72, 0xeb, 0x90, 0xf7, 0xa0, 0xaf,
	0x31, 0xcb, 0x50, 0x62, 0x98, 0x9a, 0xfe, 0x6a, 0xc7, 0x74, 0xdf, 0x21, 0x53, 0x7b, 0x34, 0xa7,
	0xcd, 0xa0, 0x83, 0x9e, 0x6e, 0x28, 0x4d, 0x1e, 0x41, 0x3f, 0x97, 0x51, 0xca, 0xd2, 0xb0, 0xc0,
	0x28, 0x35, 0xfd, 0xcd, 0xd5, 0x1e, 0xb8, 0x5a, 0x17, 0x70, 0xd0, 0x73, 0x83, 0x9c, 0xd2, 0x36,
	0x9a, 0xe4, 0x79, 0x4a, 0x7f, 0x77, 0xdd, 0xd9, 0xef, 0xf1, 0x9f, 0x2d, 0x18, 0x54, 0x69, 0x07,
	0x4c, 0x4b, 0xa3, 0x12, 0x86, 0xa9, 0x93, 0x2a, 0xf5, 0xa4, 0x11, 0x3a, 0xa9, 0x62, 0x5a, 0x34,
	0x52, 0xba, 0x0f, 0x1d, 0x65, 0x42, 0x83, 0x3e, 0x77, 0x67, 0x55, 0x99, 0x8f, 0x1b, 0x48, 0x23,
	0x5a, 0xd6, 0x68, 0x8e, 0xe8, 0x21, 0xf8, 0xca, 0x84, 0x45, 0xf4, 0x42, 0x69, 0x4d, 0x2f, 0x91,
	0x75, 0x94, 0x99, 0xa1, 0xae, 0x21, 0x17, 0x17, 0x79, 0x49, 0xf3, 0x0d, 0x44, 0xbd, 0xa9, 0x5c,
	0x5a, 0x58, 0x6c, 0x2b, 0xad, 0xb6, 0x57, 0x4f, 0x99, 0x90, 0x8b, 0x38, 0x97, 0xc9, 0x25, 0x15,
	0xee, 0xea, 0x29, 0x73, 0xe2, 0x8c, 0x0a, 0x4b, 0xe3, 0xb0, 0xac, 0xf1, 0x99, 0x33, 0xaa, 0xff,
	0x15, 0xeb, 0x44, 0x3f, 0xa7, 0xab, 0xfa, 0x7f, 0x9f, 0x5a, 0x59, 0xad, 0x2a, 0x38, 0xb2, 0x4f,
	0xeb, 0x55, 0x9f, 0xa2, 0x1e, 0xcf, 0x61, 0xff, 0x54, 0xc6, 0xb8, 0x6b, 0xdb, 0x43, 0x59, 0x5d,
	0xc8, 0xea, 0x50, 0xbe, 0x0d, 0xfe, 0xca, 0x6d, 0x32, 0xd3, 0xf6, 0x46, 0xda, 0xa4, 0xee, 0xb8,
	0xa4, 0x1a, 0x57, 0x2d, 0xd8, 0x0e, 0x7a, 0xf3, 0x73, 0x0f, 0xba, 0x33, 0xa6, 0x75, 0x94, 0xb1,
	0xf3, 0xcf, 0x56, 0x8c, 0x1c, 0x42, 0xb7, 0x7e, 0x78, 0x66, 0x3a, 0xbb, 0xbd, 0x43, 0x7a, 0xe0,
	0xbb, 0x77, 0xc4, 0xca, 0x2e, 0x21, 0xd0, 0x6f, 0xcc, 0x64, 0xbd, 0x03, 0x72, 0x0f, 0xc8, 0x8d,
	0x68, 0xad, 0x7f, 0x9b, 0x0c, 0xe0, 0xb0, 0x79, 0xb6, 0xac, 0xd9, 0x23, 0x5d, 0xd8, 0xff, 0x50,
	0xaa, 0x4b, 0x2b, 0xfa, 0x76, 0xf2, 0x27, 0x2f, 0x58, 0xb2, 0xc6, 0x82, 0xc3, 0xc7, 0xf4, 0xd5,
	0xd5, 0xd0, 0x7b, 0x7d, 0x35, 0xf4, 0xfe, 0xb9, 0x1a, 0x7a, 0x2f, 0xaf, 0x87, 0x3b, 0xaf, 0xaf,
	0x87, 0x3b, 0x7f, 0x5f, 0x0f, 0x77, 0xe2, 0x3d, 0x7c, 0x16, 0xdf, 0xfd, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x11, 0x2d, 0x6c, 0xaa, 0x62, 0x05, 0x00, 0x00,
}
